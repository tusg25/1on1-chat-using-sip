# ----------- global configuration parameters ------------------------

check_via=no    # (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)

udp_workers=4
#debug_mode=yes
log_level=1
log_stderror=yes
log_facility=LOG_LOCAL0

listen=udp:127.0.0.1:5060 
# ------------------ module loading ----------------------------------

mpath= "/usr/local/lib64/opensips/modules/"

loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "db_text.so"
loadmodule "db_cachedb.so"
loadmodule "db_mysql.so"
loadmodule "proto_udp.so"
loadmodule "nathelper.so"

# ----------------- setting module-specific parameters ---------------

# -- usrloc params --
modparam("usrloc", "db_url", "mysql://opensips:password@localhost/opensips")
modparam("usrloc", "working_mode_preset", "sql-only")
modparam("usrloc", "nat_bflag", "NAT")

# -- dbtext param--
# caching mode (0) or non-caching mode (1).
modparam("db_text", "db_mode", 1)

modparam("registrar", "received_avp", "$avp(received)")


# -------------------------  request routing logic -------------------

# main routing logic
route{

        # initial sanity checks 
        if (!mf_process_maxfwd_header(10)){
                sl_send_reply(483,"Too Many Hops");
                exit;
        };

        xlog("check message length $ml \n");
        if ($ml >=  65535 ){
                sl_send_reply(513, "Message too big");
                exit;
        };

        xlog("preloaded route checking \n ");
        if (loose_route()){
                xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
                if (!t_relay())
                {
                        sl_reply_error();
                };
                exit;
        };

        t_check_trans();

        xlog(" request methods $rm \n");
        fix_nated_contact();
        force_rport();
        setflag(6);

        if (!$rm=="REGISTER") 
                record_route();

        xlog(" to prevent rebounce , check if uri is meant for this server \n ");
        if (!is_myself("$rd")){
                xlog(" Request URI is not this Server \n");
                if (!t_relay())
                        sl_reply_error();
                exit;
        };

        if (is_myself("$rd")){
                xlog(" Request URI is this Server\n");
                if ($rm=="REGISTER"){
                        xlog("Saving $fu\n");
                        save("location","sv");
                        exit;
                };

                xlog("request URI $ru \n");

                if (!lookup("location")){
                        sl_send_reply(404, "Not Found");
                        exit;
                };
                xlog("Success\n");
        };

        xlog(" uri cases match , not match not meet \n");
        if (!t_relay())
                sl_reply_error();
}